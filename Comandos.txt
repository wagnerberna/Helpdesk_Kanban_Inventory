Ativar Ambiente Virtual:
python3 -m venv .venv && source .venv/bin/activate

Rodar:
python manage.py runserver

Rodar para todos na rede pelo IP local:
python manage.py runserver 0.0.0.0:80

Comandos:
https://github.com/Gpzim98/django-heroku


comunicar com postgres:
pip install psycopg2

Uso do .env:
pip install python-decouple
from decouple import config
SECRET_KEY = config('SECRET_KEY')

Erro decouple:
pip uninstall decouple
pip install decouple

configurações do DB:
pip install dj-database-url
from dj_database_url import parse as dburl

monta a config do banco para usar o sqlite3 senão encontrar a config no .env
substitui DATABASES por:
default_dburl = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')
DATABASES = { 'default': config('DATABASE_URL', default=default_dburl, cast=dburl), }

Django não server arquivos estáticos por padrão por isso usar:
pip install dj-static
wsgi.py
from dj_static import Cling
application = Cling(get_wsgi_application())

Settings.py
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

css:
froms bootstrap Django 
pip install django-bootstrap-form
installed_apps add: "bootstrapform"
{%load bootstrap%}
{{form|bootstrap}}

---------------------------------------------------
Acesso Query Django:
#  <QuerySet [<Support: wagner.berna>]>
# print("check:::", check.values("user_name")[0])

ex: capturar id do status pelo nome
status = Status.objects.filter(name="TO DO")
print(status)
# Retorna uma Query
#<QuerySet [<Status: TO DO>]>

# Busca na query pelo campo
print(status.values("name"))
print(status.values("id"))
# Retorna a query com uma lista e dentro um dict
#<QuerySet [{'name': 'TO DO'}]>
<QuerySet [{'id': 1}]>

# Acessar o dict:
print(status.values("id")[0])
# {'id': 1}

Acessar o ID:
print(status.values("id")[0].get("id"))
# 1

--------------------------------------------------
-Executar Script Django com acesso aos models
ex.: popular o db
Diretório e nome da fn padrão "scripts", "run"
python manage.py runscript populate_db